import { Action, AnyAction, Dispatch, Reducer } from 'redux';
import { evaluate, navigate } from 'callback-router';
import { DispatchRouteMap, MapStateToPath } from './types';
export declare function registerRoutes<S, A extends Action<any> = AnyAction>(dispatchRoutes: DispatchRouteMap<S, A>, dispatch: Dispatch<A>, getState: () => S, callback?: (result: any) => void): {
    unregisterRoutes: () => void;
    evaluate: import("callback-router").EvaluateRoutes;
};
export declare function createCallbackRouterReducer<S, A extends Action<any> = AnyAction>(reducer: Reducer<S, A>, mapStateToPath: MapStateToPath<S, A>, navigateInitialState?: boolean): Reducer<S, A>;
export { evaluate, navigate, };
