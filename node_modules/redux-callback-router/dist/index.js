'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var callbackRouter = require('callback-router');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function registerRoutes(dispatchRoutes, dispatch, getState, callback) {
    var createCallback = function (action) { return (function (params, type, pathname, state, path) {
        return dispatch(typeof action === 'function' ? action(params, type, pathname, state, path, getState) : action);
    }); };
    var routes = {};
    Object.entries(dispatchRoutes)
        .forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (typeof value === 'function') {
            // Action creator
            routes[key] = createCallback(value);
        }
        else if ('type' in value) {
            // Redux action
            routes[key] = function () { return dispatch(value); };
        }
        else if ('callback' in value) {
            // Normal route definition, NOT a Redux action
            var callback_1 = value.callback, routeDefinition = __rest(value, ["callback"]);
            routes[key] = __assign({ callback: function (params, type, pathname, state, path) { return callback_1(params, type, dispatch, getState, pathname, state, path); } }, routeDefinition);
        }
        else {
            // Route definition with a Redux action or action creator
            var action = value.action, routeDefinition = __rest(value, ["action"]);
            routes[key] = __assign({ callback: createCallback(action) }, routeDefinition);
        }
    });
    return callbackRouter.registerRoutes(routes, callback);
}
function createCallbackRouterReducer(reducer, mapStateToPath, navigateInitialState) {
    if (navigateInitialState === void 0) { navigateInitialState = false; }
    return function wrappedReducer(prevState, action) {
        var prevPath = window.location.pathname;
        var nextState = reducer(prevState, action);
        var pathResult = mapStateToPath(nextState, action, prevState);
        if (pathResult) {
            var _a = typeof pathResult === 'string'
                ? [pathResult]
                : pathResult, nextPath = _a[0], options = _a[1];
            if ((navigateInitialState || prevState) && nextPath && nextPath !== prevPath) {
                callbackRouter.navigate(nextPath, options);
            }
        }
        return nextState;
    };
}

Object.defineProperty(exports, 'ROUTE_CHANGE_FORCE_PUSH_STATE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_FORCE_PUSH_STATE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_FORCE_REPLACE_STATE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_FORCE_REPLACE_STATE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_INITIALIZE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_INITIALIZE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_POP_STATE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_POP_STATE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_PUSH_STATE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_PUSH_STATE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_REPLACE_STATE', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_REPLACE_STATE;
    }
});
Object.defineProperty(exports, 'ROUTE_CHANGE_UNKNOWN', {
    enumerable: true,
    get: function () {
        return callbackRouter.ROUTE_CHANGE_UNKNOWN;
    }
});
Object.defineProperty(exports, 'evaluate', {
    enumerable: true,
    get: function () {
        return callbackRouter.evaluate;
    }
});
Object.defineProperty(exports, 'navigate', {
    enumerable: true,
    get: function () {
        return callbackRouter.navigate;
    }
});
exports.createCallbackRouterReducer = createCallbackRouterReducer;
exports.registerRoutes = registerRoutes;
